<html lang="en">

	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<meta name="description" content="">

		<title>üçø Movie Time</title>

		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>

		<style type="text/css">

			.url:hover {
    			text-decoration: underline;
    			cursor: pointer;
			}

		</style>

	</head>

	<body>

		<video autoplay src="" height="360px" controls ></video>

		<p>Small and example torrents</p>

		<ul>
			<li class="magnet url" data-id="6a9759bffd5c0af65319979fb7832189f4f3c35d">Demo real</li>
			<li class="magnet url" data-id="6fd85ac1a2193167810da8c60e92604aedd70fe5">Dept</li>
			<li class="magnet url" data-id="f76ad565160789101bf986ba582d29584d9fee67">Snowden trailer</li>
			<li class="magnet url" data-id="6a02592d2bbc069628cd5ed8a54f88ee06ac0ba5">Cosmos Laundromat: First Cycle</li>
		</ul>

		<p>Magnet Hash <input type="text" name="magnet" placeholder="Enter torrent URL."> <button id="load">Load</button></p>

		<p>Content</p>

		<ul id="content"></ul>

		<p>Magnets</p>

		<ul id="magnets">
			<li>N/A</li>
		</ul>

		<p>Client Stats</p>

		<ul id="stats">
			<li>Progress: 0%</li>
			<li>downloadSpeed: 0 Byte/s</li>
			<li>ratio: 0 Byte</li>
		</ul>

	</body>

	<script>

	$(function() {

		//
		//	Set the base URL
		//
		var api = "{{base_url}}/video";

		//
		//	Start the Client content file loop
		//
		magnet_list();

		//
		//	Start the Stats loop
		//
		stats();

		//
		//	Listen to Errors from the video tag
		//
		$("video").on("error", function() {

			//
			//	React only if the SRC was set. The video tag will execute an
			//	error immediately after loading, because no SRC is set.
			//
			//	To avoid executing an API call, we react to the error only when
			//	the SRC is set.
			//
			if($('video').attr('src'))
			{
				//
				//	Get the Magnet Hash from the input tag
				//
				var magnet = $('input').val();

				//
				//	If the format of the file is not supported by the video tag,
				//	we stop downloading the content since it is of no use to us.
				//
				$.get(api + '/delete/' + magnet, function(data) {

					$('input').val('');

				});
			}

		});

		//
		//	React each time an element from the example magnet list is clicked
		//
		$('.magnet').click(function() {

			//
			//	Get the Magnet Hash from the LI element clicked
			//
			var magnet = $(this).attr("data-id");

			//
			//	Remove the place holder of the input tag. If we don't do this
			//	the interface will look like poop
			//
			$("input").removeAttr('placeholder');

			//
			//	Set the Magnet Hash in the input tag.
			//
			$("input").val(magnet)

			load();

		});

		//
		//	React each time a file name is clicked form the Content UL
		//
		$('#content').on('click', '.file', function() {

			//
			//	Get the Magnet Hash
			//
			var magnet = $('input').val();

			//
			//	Get the file name that was clicked
			//
			var file_name = $(this).attr("data-name");

			//
			//	Set the proper SRC of the video player
			//
			$('video').attr('src', api + '/stream/' + magnet + "/" + file_name);

		});

		//
		//	React each time a file name is clicked form the Content UL
		//
		$('#magnets').on('click', '.magnet', function() {

			//
			//	Get the file name that was clicked
			//
			var magnet_hash = $(this).attr("data-hash");

			//
			//	Set the proper SRC of the video player
			//
			$.get(api + "/delete/" + magnet_hash, function(data) {

			});

		});

		//
		//	Load the content of the Magnet Hash
		//
		$('#load').click(function() {

			console.log("Click")
			load();

		});

		//
		//	Stop downloading.
		//
		$('#stop').click(function() {

			$('video').attr('src', '');
			$('video')[0].load();

		});

		function load()
		{
			//
			//	Disable to loading button
			//
			$('#load').prop('disabled', true);

			//
			//	Clear the UL content before appending new data
			//
			$("#content").empty();

			//
			//	Let the user know what to expect
			//
			$("#content").append('<li>Loading...</li>');

			//
			//	Get Magnet hash from the input field
			//
			var magnet = $('input').val();

			//
			//	React only if there is a Magnet Has
			//
			if(!magnet)
			{
				return console.error("No Magnet hash")
			}

			//
			//	Make a request to the back end to load the Magnet Hash
			//
			$.get(api + '/add/' + magnet, function(data) {

				//
				//	Clear the UL content before appending new data
				//
				$("#content").empty();

				//
				//	Loop over the server response and list all the file inside
				//	the Magnet Hash.
				//
				$.each(data, function(index, obj) {

					$("#content").append('<li class="file url" data-name="' + obj.name + '">'+ obj.name + ' (' + formatBytes(obj.length, 0) + ') </li>');
				})

				//
				//	Re-enable the loading button
				//
				$('#load').prop('disabled', false);

			});

		}

		//
		// Get a list Magnets in our client
		//
		function magnet_list()
		{
			//
			//	Set a timeout that will be executed after N amount of time
			//
			setTimeout(function() {

				//
				//	Make a request to the server for the data
				//
				$.get(api + '/list', function(data) {

					//
					//	Clear the content of the UL
					//
					$("#magnets").empty();

					//
					//	We populate the UL only if we get some data from the
					//	server
					//
					if(data.length > 0)
					{
						//
						//	Loop over the array to list all the files
						//
						$.each(data, function(index, obj) {

							$("#magnets").append('<li class="magnet url" data-hash="' + obj.hash + '">' + obj.hash + '</li>');

						});
					}
					else
					{
						//
						//	Display Not Available if no data is present
						//
						$("#magnets").append('<li>N/A</li>');
					}

					//
					//	Restart the timer
					//
					magnet_list();

				});

			}, 1000)
		}

		//
		//	Query the server for the stats of the downloaded content
		//
		function stats()
		{
			//
			//	Set a timeout that will be executed after N amount of time
			//
			setTimeout(function() {

				//
				//	Make a request to the server for the data
				//
				$.get(api + '/stats', function(obj) {

					//
					//	Clear the content of the UL
					//
					$("#stats").empty();

					//
					//	Create the content of the UL
					//
					var li = "<li>Progress: " + obj.progress + "%</li>" +
							 "<li>downloadSpeed: " + formatBytes(obj.downloadSpeed, 0) + "/s</li>" +
							 "<li>ratio: " + obj.ratio + "</li>";

					//
					//	Display the stats in the UL
					//
					$("#stats").append(li);

				});

				//
				//	Restart the timer
				//
				stats();

			}, 1000);
		}

	});

	function formatBytes(bytes, decimals)
	{
		if(bytes == 0)
		{
			return '0 Byte';
		}

		var k = 1000; // or 1024 for binary

		var dm = decimals + 1 || 3;

		var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

		var i = Math.floor(Math.log(bytes) / Math.log(k));

		return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
	}

	</script>

</html>